<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>War horse&#39;s blog</title>
  
  <subtitle>可能是一个行为艺术家~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://imwarhorse.github.io/"/>
  <updated>2019-07-20T13:24:01.537Z</updated>
  <id>https://imwarhorse.github.io/</id>
  
  <author>
    <name>War horse</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[玩好Spring]Spring的AOP原理</title>
    <link href="https://imwarhorse.github.io/2019/03/05/%E7%8E%A9%E5%A5%BDSpring-Spring%E7%9A%84AOP%E5%8E%9F%E7%90%86/"/>
    <id>https://imwarhorse.github.io/2019/03/05/玩好Spring-Spring的AOP原理/</id>
    <published>2019-03-05T13:09:58.000Z</published>
    <updated>2019-07-20T13:24:01.537Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="玩好Spring" scheme="https://imwarhorse.github.io/categories/%E7%8E%A9%E5%A5%BDSpring/"/>
    
    
      <category term="Java" scheme="https://imwarhorse.github.io/tags/Java/"/>
    
      <category term="框架" scheme="https://imwarhorse.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://imwarhorse.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>[玩好Spring]Spring的IoC原理</title>
    <link href="https://imwarhorse.github.io/2019/03/04/%E7%8E%A9%E5%A5%BDSpring-Spring%E7%9A%84IoC%E5%8E%9F%E7%90%86/"/>
    <id>https://imwarhorse.github.io/2019/03/04/玩好Spring-Spring的IoC原理/</id>
    <published>2019-03-04T06:14:45.000Z</published>
    <updated>2019-07-20T12:31:19.363Z</updated>
    
    <content type="html"><![CDATA[<p>IoC（Invesion of Control，控制反转）也称依赖注入（Dependency Injection），作为Spring的一个核心思想，是一种设计对象之间依赖关系的原则及其相关技术，作为Spring的一个关键技术，让我们好好了解一下。</p><h2 id="IoC是什么？"><a href="#IoC是什么？" class="headerlink" title="IoC是什么？"></a>IoC是什么？</h2><p>高内聚低耦合可以说是软件技术形态的终极目标。用学术界的话来说，软件的两个本质特征就是构造性和演化性，高内聚低耦合的设计能够让构造和演化都更加高效，比如：</p><ul><li>开发更方便组织分工</li><li>代码更容易进行复用</li><li>更容易进行测试</li><li>软件演化有更好的灵活性，能快速响应需求变化，维护代价更小</li></ul><p>软件设计各种技术的出现，无一不是朝着这个终极目标努力的。面向对象、基于组件（学术界称为构件）的软件开发、面向切面编程（AOP）、Java近些年六星的模块化方法（比如OSGi技术）等等，这些方法和技术的出现，无外乎都是为了让软件更加高内聚低耦合。与此同时，各路大神还提出软件设计原则和模式，来规范我们的软件形态。我们今天谈 IoC也是其中的一个大招。IoC（Inversion of Control，控制反转）也称为依赖注入（Dependency Injection），作为Spring的一个核心思想，是一种设计对象之间<strong>依赖关系</strong>的原则及其相关技术。</p><p>先来看看字面上怎么解释：当一个对象创建时，它所依赖的对象由外部传递给它，而非自己取创建所依赖的对象（比如通过<code>new</code>操作）。因此，也可以说在对象如何获取它的依赖对象这件事情上，控制权反转了。这便不难理解<strong>控制反转</strong>和<strong>依赖注入</strong>这两个名字的由来了。</p><h2 id="场景举例"><a href="#场景举例" class="headerlink" title="场景举例"></a>场景举例</h2><p>上面的解释听起来还是晦涩，让我们直接看具体的例子，上代码！</p><p>有个土豪老板，我们经常要出差，因此经常要订机票。订机票可以通过去哪儿网订票，也可以是通过携程订票。</p><p>我们马上可以想到通过三个类来表达这个场景，<code>Boss</code>，<code>QunarBookingService</code>，<code>CtripBookService</code>。当然了，我们还应该提供一个<code>BookingService</code>接口，作为<code>QunarBookingService</code>和<code>CtripBookingService</code>的公共抽象。面向接口编程是面向对象设计的基本原则，如果这都不了解，感觉取看看设计模式相关资料，推荐《Head First 设计模式》。</p><p><strong>BookingService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.imwarhorse.iocdemo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> interface <span class="title">BookingService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 预定航班</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bookFlight</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>QunarBookingService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.imwarhorse.iocdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QunarBookingService</span> <span class="keyword">implements</span> <span class="title">BookingService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bookFlight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"book fight by Qunar!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CtripBookingService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.imwarhorse.iocdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CtripBookingService</span> <span class="keyword">implements</span> <span class="title">BookingService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bookFlight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"book flight by Ctrip!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，土豪老板出门谈生意，得订机票了，Boss就琢磨着怎么订票呢？Boss比较了一下价格，这一次决定去哪儿，对应的Boss的代码：</p><p><strong>Boss.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.imwarhorse.iocdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookingService bookingService;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Boss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookingService = <span class="keyword">new</span> QunarBookingService();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> BookingService <span class="title">getBookingService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookingService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookingService</span><span class="params">(BookingService bookingService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookingService = bookingService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goSomewhere</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        bookingService.bookFlight();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Boss</code>的构造方法中，将其<code>bookingService</code>成员变量实例化为<code>QunarBookingService</code>，<code>goSomewhere()</code>方法中就可以调用<code>bookingService</code>的<code>bookFlight</code>方法了。</p><p>为了这个场景Run起来，我们还需要一个main方法：</p><p><strong>App.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.imwarhorse.iocdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        bossGoSomewhere();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">statis <span class="keyword">void</span> <span class="title">bossGoSomewhere</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Boss boss = <span class="keyword">new</span> Boss();</span><br><span class="line">        boss.goSomewhere();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后可以看到程序在Console中打印出了”book flight by Qunar!”。</p><h2 id="使用IoC的场景"><a href="#使用IoC的场景" class="headerlink" title="使用IoC的场景"></a>使用IoC的场景</h2><p>在这个例子中，我们看到<code>Boss</code>需要使用<code>BookingService</code>，于是<code>Boss</code>自己实例化了一个<code>QunarBookingService</code>对象。挠一下你头发还算较多的脑阔想想，身为土豪Boss，思考的都是公司战略的事儿，订个票还要自己选择通过什么方式来完成，这个Boss是不是当得实在太苦逼了。</p><p>所以土豪感觉给自己找了个美女秘书（没有深层次的意思），Boss要出差时，只需要说一声他需要订票服务，至于是哪个服务，让美女秘书选好后告诉他即可（注入！！）。（我知道事实是只需要把票给Boss就行，别杠！）</p><p>这样的话，Boss是不是一身轻松了？而这个美女秘书还是免费包邮的，这正是Spring扮演的角色。来看看使用Spring之后的代码。</p><p>我们在<code>pom.xml</code>文件中加入依赖（项目使用Maven作为构建工具，我过几天会有上传相关博文，如果等不及的话现在赶紧去找Maven的相关资料康康）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>QunarBookingService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.imwarhorse.iocdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QunarBookingService</span> <span class="keyword">implements</span> <span class="title">BookingService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bookFlight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"book fight by Qunar!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们使用Spring的<code>@Component</code>注解将<code>QunarBookingService</code>注册进Spring的Context，这样它就可以被<strong>注入</strong>到需要它的地方。相应的，创建<code>QunarBookingService</code>实例化的责任也交给了Spring。所谓的美女秘书帮你搞定！</p><blockquote><p>  注解相关知识点后面进行补充。</p></blockquote><p>新建一个<code>SmartBoss</code>类，聪明的老板知道把选择订机票服务这样的杂事交给秘书来做。</p><p><strong>SmartBoss.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.imwarhorse.iocdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmartBoss</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookingService bookingService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookingService</span><span class="params">(BookingService bookingService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookingService = bookingService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BookingService <span class="title">getBookingService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookingService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goSomewhere</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        bookingService.bookFlight();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，<code>SmartBoss</code>不再自己创建<code>BookingService</code>的实例，只是通过<code>@Autowired</code>注解来告诉Spring秘书我需要一个<code>BookingService</code>。</p><p>调用代码因此也要做一些小修改，需要创建Spring的Context：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">smartBossGoSomewhere</span><span class="params">()</span> </span>&#123;</span><br><span class="line">AbstractApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(App.class);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SmartBoss boss = context.getBean(SmartBoss.class);</span><br><span class="line">        boss.goSomewhere();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IoC的好处"><a href="#IoC的好处" class="headerlink" title="IoC的好处"></a>IoC的好处</h2><p>回到正题，通过上面的例子，我们来看看IoC到底带来了哪些好处？</p><p><code>Boss</code>没有和某个具体的<code>BookingService</code>类耦合到一起了，这样<code>Boss</code>的维护和演化就更加方便。想象一下，如果<code>Boss</code>需要改用<code>CtripBookingService</code>，这时需要修改<code>Boss.java</code>的代码，更换接口的实现非常方便，给<code>Boss</code>注入新的实现即可，轻松惬意。（当然，要做到热插拔还需要进一步的工作，要么得玩转类加载器这玩意，或者借助OSGi这样的神器）。这也是典型的<strong>开放-封闭原则</strong>的例子。即对现有模块，功能扩展应该是开放的，而对其代码修改应该是封闭的，即能够做到不需要修改已有代码来扩展新的功能。</p><p>想象一下，如果<code>Boss</code>自己直接去实例化<code>QunarBookingService</code>，而<code>QunarBookingService</code>在另外一个Package中甚至另一个Jar包中，你可得<code>import</code>进来才能使用，耦合度MAX！现在好了，<code>Boss</code>只依赖于抽象接口，测试更方便了，Mock一下就轻松搞定！<code>Boss</code>和<code>QunarBookingService</code>彼此不知道对方，Spring帮两者粘合在一起。</p><p>为什么IoC是个大招，因为它会自然而然得促进你应用一些好的设计原则，会帮助你开发出更加“高内聚低耦合”的应用。</p><h2 id="IoC如何实现"><a href="#IoC如何实现" class="headerlink" title="IoC如何实现"></a>IoC如何实现</h2><p>最后我们简单说说IoC是如何实现的。想象一下，如果我们自己来实现这个依赖注入的功能，我们怎么来做？无外乎：</p><ul><li>读取标注或者配置文件，看看Boss依赖的是哪个BookingService，拿到类名</li><li>使用反射的API，基于类名实例化对应的对象实例</li><li>将对象实例，通过构造函数或者setter，传递给Boss</li></ul><p>我们发现其实自己来实现也不是很难，Spring实际也就是这么做的。这么看的话其实IoC就是一个工厂模式的升级版。当然要做一个成熟的IoC框架，还是非常多细致的工作要做，Spring不仅提供了一个已经成为业界标准的Java IoC框架，还提供了更多强大的功能，所以大家就别去造轮子了（当技术到达了更高的境界之后，可以尝试着造轮子）。希望了解IoC更多实现细节不妨通过同学Spring的源码来加深理解！</p><blockquote><p>  David</p><p>  <a href="https://www.tianmaying.com/tutorial/spring-ioc" target="_blank" rel="noopener">https://www.tianmaying.com/tutorial/spring-ioc</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IoC（Invesion of Control，控制反转）也称依赖注入（Dependency Injection），作为Spring的一个核心思想，是一种设计对象之间依赖关系的原则及其相关技术，作为Spring的一个关键技术，让我们好好了解一下。&lt;/p&gt;
&lt;h2 id=&quot;I
      
    
    </summary>
    
      <category term="玩好Spring" scheme="https://imwarhorse.github.io/categories/%E7%8E%A9%E5%A5%BDSpring/"/>
    
    
      <category term="Java" scheme="https://imwarhorse.github.io/tags/Java/"/>
    
      <category term="框架" scheme="https://imwarhorse.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://imwarhorse.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>[玩好Spring]初识Spring</title>
    <link href="https://imwarhorse.github.io/2019/03/02/%E7%8E%A9%E5%A5%BDSpring-%E5%88%9D%E8%AF%86Spring/"/>
    <id>https://imwarhorse.github.io/2019/03/02/玩好Spring-初识Spring/</id>
    <published>2019-03-02T07:02:08.000Z</published>
    <updated>2019-07-20T13:11:56.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>   每个新产品或新技术的出现都是为了解决现有的问题或痛点。</p></blockquote><p>回想在还没有接触框架的时候，代码是怎么写的。不停的newnewnew…，整个程序的多个分层之间，依赖性很强，A层用到了B层的类，B层用到了C层的类，C层用了B层的类……这是框架解决的痛点之一——高耦合，不易扩展。</p><p>基于上一条，各层级之间有千丝万缕的关联，而此时，项目需求变更，其中一层的某个或某些类中的代码需要发生变动，或者整个项目的架构需要发生变动，此时工作量是相当大的。这是框架解决的痛点之二——需求变更导致工作量指数性增加。</p><p>重复造轮子是愚蠢的。这是框架解决的痛点之三——代码重用率高，重复造轮子难以专注于业务。</p><h2 id="技术演变过程"><a href="#技术演变过程" class="headerlink" title="技术演变过程"></a>技术演变过程</h2><p>在2015年（或者说2014年）之前，企业级应用技术选型上Strust大行其道，但在2014年到2015年间，“轻量级”这个概念进入开发人员的视野中，Spring这样的轻量级框架也就自然而然的接管的“大好江山”，当然，促使开发人员放弃Struts这个“行动不便的老家伙”的最主要原因是那两年Struts频繁被曝出高危漏洞，导致开发人员和企业对它的信心逐渐消失，实在难顶…</p><h2 id="Spring是什么"><a href="#Spring是什么" class="headerlink" title="Spring是什么"></a>Spring是什么</h2><p>Spring是一个轻量级的DI/IoC（控制反转）和AOP（面向切面）的容器框架。</p><p>Spring的两大核心：第一个是DI也叫IoC，可以简单的认为就是一个东西，中文意思依赖注入/控制反转；第二个是AOP，即面向切面。</p><p>参考资料：<br><a href="https://zh.wikipedia.org/wiki/Spring_Framework" target="_blank" rel="noopener">Spring Framework-Wiki</a><br><a href="https://baike.baidu.com/item/spring%E6%A1%86%E6%9E%B6/2853288" target="_blank" rel="noopener">Spring框架-百度百科</a></p><h2 id="Spring的优点"><a href="#Spring的优点" class="headerlink" title="Spring的优点"></a>Spring的优点</h2><ol><li>易于使用。内部隐藏了大部分复杂的实现，而且，如果难用那还用框架干嘛，闲得蛋疼…？</li><li>使用Spring的IoC容器，将对象之间的依赖关系交给Spring，降低组件之间的耦合性，让我们更专注于业务逻辑；</li><li>可以提供众多的服务，事务管理等；</li><li>良好的AOP支持，方便面向切面编程；</li><li>对主流的框架提供了很好的继承支持，比如Hibernate，Strusts2，JPA等（前两个现在来说不算主流了）；</li><li>Spring DI机制降低了业务对象替换的替换的复杂性；</li><li>对代码低侵入，代码污染极低；</li><li>高度可开放性，并不强制依赖于Spring，开发者可以自由选择Spring</li></ol><p>部分或全部。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;   每个新产品或新技术的出现都是为了解决现有的问题或痛点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回想在还没
      
    
    </summary>
    
      <category term="玩好Spring" scheme="https://imwarhorse.github.io/categories/%E7%8E%A9%E5%A5%BDSpring/"/>
    
    
      <category term="Java" scheme="https://imwarhorse.github.io/tags/Java/"/>
    
      <category term="框架" scheme="https://imwarhorse.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="https://imwarhorse.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb13-JSP的九大内置对象及四个作用域对象</title>
    <link href="https://imwarhorse.github.io/2019/02/22/JavaWeb13-JSP%E7%9A%84%E4%B9%9D%E5%A4%A7%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%9B%9B%E4%B8%AA%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%AF%B9%E8%B1%A1/"/>
    <id>https://imwarhorse.github.io/2019/02/22/JavaWeb13-JSP的九大内置对象及四个作用域对象/</id>
    <published>2019-02-22T00:56:58.000Z</published>
    <updated>2019-07-19T13:16:54.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h1><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>JSP文件在转译成其对应的Servlet文件的时候自动生成并声明的对象。我们在JSP页面中直接使用即可。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>内置对象在JSP页面中使用，只能在局部代码块或者脚本段语句中使用，不能在全局代码块中使用。<br>    因为JSP文件转译后所有的代码都在转译后的Servlet的service()方法下，而九大内置对象都声明在service()方法中，全局代码块无法访问。</p><h2 id="pageContext对象"><a href="#pageContext对象" class="headerlink" title="pageContext对象"></a>pageContext对象</h2><blockquote><p>   页面上下文对象，封存了其他内置对象。封存了当前jsp的运行信息。</p></blockquote><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>每个JSP文件单独拥有一个pageContext对象。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>当前页面。</p><h2 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h2><blockquote><p>  封存当前请求信息数据的对象。由Tomcat服务器创建。</p></blockquote><h3 id="作用域-1"><a href="#作用域-1" class="headerlink" title="作用域"></a>作用域</h3><p>一次请求中。</p><h2 id="Session对象"><a href="#Session对象" class="headerlink" title="Session对象"></a>Session对象</h2><blockquote><p>  此对象是用来存储用户的不同请求的共享数据的。</p></blockquote><h3 id="作用域-2"><a href="#作用域-2" class="headerlink" title="作用域"></a>作用域</h3><p>一次会话中。</p><h2 id="application"><a href="#application" class="headerlink" title="application"></a>application</h2><blockquote><p>  此对象用来存储用户的不同请求的共享数据的。一个项目只有一个，存储所有用户共享数据的对象，以及完成其他操作（比如获取文件的绝对路径）。</p></blockquote><h3 id="作用域-3"><a href="#作用域-3" class="headerlink" title="作用域"></a>作用域</h3><p>整个项目内。</p><h2 id="response对象"><a href="#response对象" class="headerlink" title="response对象"></a>response对象</h2><blockquote><p>  用来响应请求处理结果给浏览器的对象。设置响应头，重定向。</p></blockquote><h2 id="out对象"><a href="#out对象" class="headerlink" title="out对象"></a>out对象</h2><blockquote><p>  响应对象，JSP内部使用，带有缓冲区的响应对象，效率高于response对象。</p></blockquote><h2 id="page对象"><a href="#page对象" class="headerlink" title="page对象"></a>page对象</h2><blockquote><p>  代表当前JSP的对象。相当于Java中的this。</p></blockquote><h2 id="exception对象"><a href="#exception对象" class="headerlink" title="exception对象"></a>exception对象</h2><blockquote><p>  异常对象，存储了当前运行的异常信息。</p><p>  注意：使用此对象需要在page指令中使用属性isErrorPage=”true”开启。</p></blockquote><h2 id="config对象"><a href="#config对象" class="headerlink" title="config对象"></a>config对象</h2><blockquote><p>  也就是ServletConfig，只要是用来获取web.xml中的配置数据，完成一些初始化数据的读取。</p></blockquote><h2 id="四个作用域"><a href="#四个作用域" class="headerlink" title="四个作用域"></a>四个作用域</h2><h3 id="pageContext作用域"><a href="#pageContext作用域" class="headerlink" title="pageContext作用域"></a>pageContext作用域</h3><blockquote><p>  当前页面。解决了当前页面内的数据共享问题。获取其他内置对象。</p></blockquote><h3 id="request作用域"><a href="#request作用域" class="headerlink" title="request作用域"></a>request作用域</h3><blockquote><p>  一次请求。一个请求的Servlet的数据共享。通过请求转发将数据流转给下一个Servlet。</p></blockquote><h3 id="session作用域"><a href="#session作用域" class="headerlink" title="session作用域"></a>session作用域</h3><blockquote><p>  一次会话。一个用户的不同请求的数据共享。将数据从一次请求流转给其他请求。</p></blockquote><h3 id="application作用域"><a href="#application作用域" class="headerlink" title="application作用域"></a>application作用域</h3><blockquote><p>  项目内。不同用户的数据共享问题。将数据从一个用户的数据流转给其他用户。</p></blockquote><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>数据流转。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;九大内置对象&quot;&gt;&lt;a href=&quot;#九大内置对象&quot; class=&quot;headerlink&quot; title=&quot;九大内置对象&quot;&gt;&lt;/a&gt;九大内置对象&lt;/h1&gt;&lt;h3 id=&quot;内置对象&quot;&gt;&lt;a href=&quot;#内置对象&quot; class=&quot;headerlink&quot; title=&quot;内
      
    
    </summary>
    
      <category term="JavaWeb" scheme="https://imwarhorse.github.io/categories/JavaWeb/"/>
    
    
      <category term="Java" scheme="https://imwarhorse.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://imwarhorse.github.io/tags/Servlet/"/>
    
      <category term="Web" scheme="https://imwarhorse.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb12-JSP的静/动态引入及forward转发标签</title>
    <link href="https://imwarhorse.github.io/2019/02/21/JavaWeb12-JSP%E7%9A%84%E9%9D%99-%E5%8A%A8%E6%80%81%E5%BC%95%E5%85%A5%E5%8F%8Aforward%E8%BD%AC%E5%8F%91%E6%A0%87%E7%AD%BE/"/>
    <id>https://imwarhorse.github.io/2019/02/21/JavaWeb12-JSP的静-动态引入及forward转发标签/</id>
    <published>2019-02-21T14:16:50.000Z</published>
    <updated>2019-07-19T12:56:22.516Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静态引入"><a href="#静态引入" class="headerlink" title="静态引入"></a>静态引入</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">"要引入的jsp文件的相对路径"</span> %&gt;</span><br></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>会将引入的jsp文件和当前jsp文件转译成一个Java（Servlet）文件使用；</li><li>在网页中也就显示处了合并后的显示效果。</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>静态引入的jsp文件不会单独转译成Java（Servlet）文件。</p><p>当前文件和静态引入的jsp文件不能够使用Java代码声明同名变量。</p><h2 id="动态引入"><a href="#动态引入" class="headerlink" title="动态引入"></a>动态引入</h2><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page="要引入的jsp文件的相对路径"&gt;&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ol><li>会将引入的jsp文件单独编译，在当前文件编译好的Java文件中调用引入的jsp文件的编译文件。</li><li>在网页中显示合并后的显示效果。</li></ol><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>动态引入允许文件中声明同名变量。</p><blockquote><p>  静态引入和动态引入的优点：降低jsp代码的冗余，便于维护升级。</p></blockquote><h2 id="forward转发标签"><a href="#forward转发标签" class="headerlink" title="forward转发标签"></a>forward转发标签</h2><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page="要转发的jsp文件的相对路径"&gt;&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ol><li>一次请求；</li><li>地址栏信息不改变。</li></ol><h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><p>在转发标签的闭合标签中间除了写&lt;jsp:param value=”” name=”” /&gt;不会报错，其他的任意字符都会报错，包括空格。<br>    name属性为附带的数据的键名。<br>    value为附带的数据内容。</p><p>转发时会将数据以<code>?</code>的形式拼接在转发路径的后面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;静态引入&quot;&gt;&lt;a href=&quot;#静态引入&quot; class=&quot;headerlink&quot; title=&quot;静态引入&quot;&gt;&lt;/a&gt;静态引入&lt;/h2&gt;&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h
      
    
    </summary>
    
      <category term="JavaWeb" scheme="https://imwarhorse.github.io/categories/JavaWeb/"/>
    
    
      <category term="Java" scheme="https://imwarhorse.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://imwarhorse.github.io/tags/Servlet/"/>
    
      <category term="Web" scheme="https://imwarhorse.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb11-JSP之代码块</title>
    <link href="https://imwarhorse.github.io/2019/02/21/JavaWeb11-JSP%E4%B9%8B%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    <id>https://imwarhorse.github.io/2019/02/21/JavaWeb11-JSP之代码块/</id>
    <published>2019-02-21T13:31:33.000Z</published>
    <updated>2019-07-19T12:40:51.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="局部代码块"><a href="#局部代码块" class="headerlink" title="局部代码块"></a>局部代码块</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>局部代码块中声明的Java代码会被原样转译到jsp对应的Servlet文件的<code>_JspService()</code>方法中。</p><p>代码块中声明的变量都是局部变量。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% Java代码 %&gt;</span><br></pre></td></tr></table></figure><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>使用局部代码块在jsp中进行逻辑判断，书写麻烦，阅读困难。</p><h3 id="使用时机"><a href="#使用时机" class="headerlink" title="使用时机"></a>使用时机</h3><p>尽量少在jsp中加入逻辑代码。</p><p>开发中，Servler进行请求逻辑处理，使用jsp进行页面展现。</p><h2 id="全局代码块"><a href="#全局代码块" class="headerlink" title="全局代码块"></a>全局代码块</h2><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><p>声明的Java代码作为全局代码转译到对应的Servlet类中。</p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! 全局代码 %&gt;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>全局代码块声明的代码，需要使用局部代码块调用。</p><h2 id="脚本段语句"><a href="#脚本段语句" class="headerlink" title="脚本段语句"></a>脚本段语句</h2><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><p>帮助我们快速的获取变量和方法的返回值响应给浏览器。</p><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= 变量名或方法 %&gt;</span><br></pre></td></tr></table></figure><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>不要再变量名或方法后使用分号。</p><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><p>除了JSP语法要求以外的任何位置都可以写。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;局部代码块&quot;&gt;&lt;a href=&quot;#局部代码块&quot; class=&quot;headerlink&quot; title=&quot;局部代码块&quot;&gt;&lt;/a&gt;局部代码块&lt;/h2&gt;&lt;h3 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特
      
    
    </summary>
    
      <category term="JavaWeb" scheme="https://imwarhorse.github.io/categories/JavaWeb/"/>
    
    
      <category term="Java" scheme="https://imwarhorse.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://imwarhorse.github.io/tags/Servlet/"/>
    
      <category term="Web" scheme="https://imwarhorse.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb10-JSP之page指令</title>
    <link href="https://imwarhorse.github.io/2019/02/21/JavaWeb10-JSP%E4%B9%8Bpage%E6%8C%87%E4%BB%A4/"/>
    <id>https://imwarhorse.github.io/2019/02/21/JavaWeb10-JSP之page指令/</id>
    <published>2019-02-21T12:49:22.000Z</published>
    <updated>2019-07-19T12:32:49.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JSP的注释"><a href="#JSP的注释" class="headerlink" title="JSP的注释"></a>JSP的注释</h2><h3 id="前端语言注释"><a href="#前端语言注释" class="headerlink" title="前端语言注释"></a>前端语言注释</h3><p>会被转译，也会被发送，但是不会被浏览器执行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Java语言注释"><a href="#Java语言注释" class="headerlink" title="Java语言注释"></a>Java语言注释</h3><p>会被转译，但是不会被Servlet执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line"><span class="comment">/***/</span></span><br></pre></td></tr></table></figure><h3 id="JSP注释"><a href="#JSP注释" class="headerlink" title="JSP注释"></a>JSP注释</h3><p>不会被转译。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--  --%&gt;</span><br></pre></td></tr></table></figure><h2 id="page指令"><a href="#page指令" class="headerlink" title="page指令"></a>page指令</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% page 属性名=<span class="string">"属性值"</span> 属性名=<span class="string">"属性值"</span>...%&gt;</span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li>language：声明JSP被转译的语言。通常是值为java。</li><li>import：声明转译的java文件要导入的包，不同的包使用英文逗号隔开。</li><li>pageEncoding：设置JSP文件的数据编码格式。</li><li>contentType：设置JSP数据响应给浏览器时，浏览器的解析和编码格式。举例：”text/html;charset=utf-8”。</li><li>session：设置转译的Servlet中是否开启Session支持，默认开启。true表示开启，false表示关闭。</li><li>errorPage：设置JSP运行错误后跳转的页面。</li><li>extends：设置JSP转译的Java文件要继承的父类。</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>page指令的作用就是配置jsp文件的转译相关的参数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JSP的注释&quot;&gt;&lt;a href=&quot;#JSP的注释&quot; class=&quot;headerlink&quot; title=&quot;JSP的注释&quot;&gt;&lt;/a&gt;JSP的注释&lt;/h2&gt;&lt;h3 id=&quot;前端语言注释&quot;&gt;&lt;a href=&quot;#前端语言注释&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="JavaWeb" scheme="https://imwarhorse.github.io/categories/JavaWeb/"/>
    
    
      <category term="Java" scheme="https://imwarhorse.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://imwarhorse.github.io/tags/Servlet/"/>
    
      <category term="Web" scheme="https://imwarhorse.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb09-JSP的概念和运行原理</title>
    <link href="https://imwarhorse.github.io/2019/02/21/JavaWeb09-JSP%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
    <id>https://imwarhorse.github.io/2019/02/21/JavaWeb09-JSP的概念和运行原理/</id>
    <published>2019-02-21T12:02:51.000Z</published>
    <updated>2019-07-19T12:15:53.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在学了Servlet之后，使用Servlet进行页面的展现，代码书写过于麻烦。极大的影响了开发的效率，那么有没有一种方式可以让我们像以前写网页一样来进行网页的编程工作呢？</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>使用JSP技术。</p><h3 id="概念（了解）"><a href="#概念（了解）" class="headerlink" title="概念（了解）"></a>概念（了解）</h3><p>JSP全名为Java Server Page，中文名叫Java服务器页面，其根本是一个简化的Servlet设计，它是由Sun Microsystems公司提倡、许多公司参与的一起建立的一种动态网页技术标准。</p><p>在保留Servlet的优点的同时，可以让我们像以前编写HTML一样流畅的编写网页信息。也就是说，用JSP来进行网页信息的响应的话，它里面可以进行业务逻辑判断（不可取）。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>本质上还是Servlet（内部由JspServlet将JSP转义为Servlet）；</li><li>跨平台，一次编写到处运行；</li><li>组件跨平台；</li><li>健壮性和安全性。</li></ul><h3 id="JSP的访问原理"><a href="#JSP的访问原理" class="headerlink" title="JSP的访问原理"></a>JSP的访问原理</h3><p>浏览器发起请求，请求JSP，请求被Tomcat服务器接收，执行JspServlet，将请求的JSP文件转义成为对应的Java文件（也是Servlet），然后执行转义好的Java文件。</p><h3 id="JSP的语法和指令"><a href="#JSP的语法和指令" class="headerlink" title="JSP的语法和指令"></a>JSP的语法和指令</h3><ul><li>JSP的page指令</li><li>JSP的taglib指令</li><li>JSP的局部代码块</li><li>JSP的全局代码块</li><li>JSP的脚本段</li><li>JSP的注释</li><li>JSP的静态引入（JSP的include指令）</li><li>JSP的动态引入</li><li>页面转发（forward标签）</li></ul><h3 id="JSP的内置对象"><a href="#JSP的内置对象" class="headerlink" title="JSP的内置对象"></a>JSP的内置对象</h3><ul><li>PageContext对象</li><li>Request对象</li><li>Session对象</li><li>Application对象</li><li>Response对象</li><li>Out对象</li><li>Page对象</li><li>Exception对象</li></ul><blockquote><p>  是否为动态网页的衡量标准：页面内数据数据是否会动态的更改。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;在学了Servlet之后，使用Servlet进行页面的展现，代码书写过于麻烦。极大的影响了开发的效率，那么有没有一种方式可以让我们像以前写网
      
    
    </summary>
    
      <category term="JavaWeb" scheme="https://imwarhorse.github.io/categories/JavaWeb/"/>
    
    
      <category term="Java" scheme="https://imwarhorse.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://imwarhorse.github.io/tags/Servlet/"/>
    
      <category term="Web" scheme="https://imwarhorse.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb08-web.xml与server.xml</title>
    <link href="https://imwarhorse.github.io/2019/02/20/JavaWeb08-web-xml%E4%B8%8Eserver-xml/"/>
    <id>https://imwarhorse.github.io/2019/02/20/JavaWeb08-web-xml与server-xml/</id>
    <published>2019-02-20T06:07:54.000Z</published>
    <updated>2019-07-19T13:20:11.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>存储项目相关的配置信息，保护Servlet。解耦一些数据和对程序的依赖。</p><h3 id="使用位置"><a href="#使用位置" class="headerlink" title="使用位置"></a>使用位置</h3><p>每个Web项目中。</p><p>Tomcat服务器中（在服务器目录conf目录中）。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>Web项目下的web.xml文件为局部配置，针对本项目的配置。</p><p>Tomcat下的web.xml文件为全局配置，配置作用域服务器下的所有Web项目，但是，优先级小于局部配置。</p><h3 id="内容（核心组件）"><a href="#内容（核心组件）" class="headerlink" title="内容（核心组件）"></a>内容（核心组件）</h3><ol><li>全局上下文配置（全局配置参数）；</li><li>Servlet配置；</li><li>过滤器配置；</li><li>监听器配置。</li></ol><h3 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h3><p>Web容器会按ServletContext –&gt; context-param –&gt; listener –&gt; filter –&gt; servlet这个顺序加载组件，这些元素可配置在web.xml中。</p><h3 id="加载时机"><a href="#加载时机" class="headerlink" title="加载时机"></a>加载时机</h3><p>服务器启动时。</p><h2 id="server-xml"><a href="#server-xml" class="headerlink" title="server.xml"></a>server.xml</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>浏览器发起请求后，服务器根据请求在webapps目录下调用对应的Servlet进行请求处理。那么为什么是webapps目录暗道不能是其他的目录吗？</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>了解server.xml文件的配置信息。</p><h3 id="内容-核心组件"><a href="#内容-核心组件" class="headerlink" title="内容(核心组件)"></a>内容(核心组件)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Connector</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Engine</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Context</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><p>把下面这段配置复制到server.xml的&lt;Host&gt;组件中就能实现热部署：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/项目别名"</span> <span class="attr">reloadable</span>=<span class="string">"false"</span> <span class="attr">docBase</span>=<span class="string">"需要进行热部署的项目的绝对路径，路径要到WebRoot"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>如果把reloadable更改为true，则每次Servlet发生改变，项目都会重新加载到内存。</p><blockquote><p>   注意：如果进行了热部署的项目要删除，一定要把在server.xml文件中配置的热部署&lt;Context&gt;删除，否则Tomcat在启动时会报错。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;web-xml&quot;&gt;&lt;a href=&quot;#web-xml&quot; class=&quot;headerlink&quot; title=&quot;web.xml&quot;&gt;&lt;/a&gt;web.xml&lt;/h2&gt;&lt;h3 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作
      
    
    </summary>
    
      <category term="JavaWeb" scheme="https://imwarhorse.github.io/categories/JavaWeb/"/>
    
    
      <category term="Java" scheme="https://imwarhorse.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://imwarhorse.github.io/tags/Servlet/"/>
    
      <category term="Web" scheme="https://imwarhorse.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb07-ServletContext及ServletConfig对象</title>
    <link href="https://imwarhorse.github.io/2019/02/20/JavaWeb07-ServletContext%E5%8F%8AServletConfig%E5%AF%B9%E8%B1%A1/"/>
    <id>https://imwarhorse.github.io/2019/02/20/JavaWeb07-ServletContext及ServletConfig对象/</id>
    <published>2019-02-20T02:24:00.000Z</published>
    <updated>2019-07-19T11:25:26.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Request解决了一次请求内的数据共享问题，Session解决了用户不同请求间的数据共享问题，那么不同数据的数据共享该怎么办呢？</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>ServletContext对象。</p><blockquote><p>  每次写“解决”这一项的时候总感觉自己在说废话……</p></blockquote><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>解决不同用户间的数据共享问题。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>ServletContext对象由服务器进行创建，一个项目只有一个ServletContext对象。不管在项目的任意位置进行获取得到的都是同一个ServletContext对象，那么不同用户发起的请求获取到的也就是同一个对象了，该对象由所有用户共同拥有。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>由服务器创建；</p><p>用户共享；</p><p>一个项目只有一个。</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>服务器启动到服务器关闭</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>整个项目内</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>获取ServletContext对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种（常用）</span></span><br><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"><span class="comment">// 第二种（特殊情况下使用）</span></span><br><span class="line">ServletContext context = <span class="keyword">this</span>.getServletConfig.getServletContext();</span><br><span class="line"><span class="comment">// 第三种（常用）</span></span><br><span class="line">ServletContext context = request.getSession().getServletContext();</span><br></pre></td></tr></table></figure><p>使用ServletContext对象完成数据共享：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据存储</span></span><br><span class="line">context.setAttribute(String name, Object value);</span><br><span class="line"><span class="comment">// 数据获取</span></span><br><span class="line">context.getAttribute(String name);</span><br></pre></td></tr></table></figure><blockquote><p>   注意：不同的用户可以给ServletContext对象进行数据存取。</p></blockquote><p>获取项目中web.xml文件中的全局配置数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 根据键的名字返回web.xml中适配的全局数据的值，返回String类型。如果不存在则返回null。</span><br><span class="line">context.getInitParameter(String name);</span><br><span class="line"></span><br><span class="line">// 返回键名的枚举</span><br><span class="line">context.getInitParameterNames();</span><br></pre></td></tr></table></figure><p>web.xml中配置全局数据的方式（适用于所有XML）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Edward<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>  注意：一组&lt;context-param&gt;标签只能存储一组键值对数据，多组可以声明多个&lt;context-param&gt;进行存储。</p></blockquote><p>作用：将静态数据和代码进行解耦。</p><p>获取项目WebRoot下的资源的绝对路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取的路径为项目根路径，path参数为项目根目录下的路径。</span></span><br><span class="line">String path = context.getRealPath(String path);</span><br></pre></td></tr></table></figure><p>获取WebRoot下的资源的流对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream is = context.getResourceAsStream(String path);</span><br></pre></td></tr></table></figure><blockquote><p>   注意：此种方式只能获取项目根目录下的资源流对象，class文件的流对象需要使用类加载器获取。</p><p>  path参数为项目根目录下的路径。</p></blockquote><h2 id="ServletConfig对象"><a href="#ServletConfig对象" class="headerlink" title="ServletConfig对象"></a>ServletConfig对象</h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>在使用ServletContext对象获取web.xml中的全局配置文件，在web.xml中，每个Servlet也可以进行单独的配置，那么该怎么获取配置信息？</p><h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h3><p>使用ServletConfig对象。</p><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>ServletConfig对象是Servlet的专属配置对象，每个Servlet都单独拥有一个ServletConfig对象，用来获取web.xml中的配置信息。</p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>获取ServletConfig对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServletConfig config = <span class="keyword">this</span>.getServletConfig();</span><br></pre></td></tr></table></figure><p>获取web.xml中Servlet的配置信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.getInitParameter(String name);</span><br></pre></td></tr></table></figure><p>在web.xml中配置数据的方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletConfigServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.text.servlet.ServletConfigServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Request：解决了一次请求内的数据共享问题。</p><p>Response：一个用来将数据响应到浏览器的对象。</p><p>Cookie：解决了发送的不同请求之间的数据共享问题。浏览器端存储技术。</p><p>Session：解决了一个用户的不同请求的数据共享问题。服务器端存储技术。依赖于Cookie。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ServletContext对象&quot;&gt;&lt;a href=&quot;#ServletContext对象&quot; class=&quot;headerlink&quot; title=&quot;ServletContext对象&quot;&gt;&lt;/a&gt;ServletContext对象&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="JavaWeb" scheme="https://imwarhorse.github.io/categories/JavaWeb/"/>
    
    
      <category term="Java" scheme="https://imwarhorse.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://imwarhorse.github.io/tags/Servlet/"/>
    
      <category term="Web" scheme="https://imwarhorse.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb06-Session</title>
    <link href="https://imwarhorse.github.io/2019/01/19/JavaWeb06-Session/"/>
    <id>https://imwarhorse.github.io/2019/01/19/JavaWeb06-Session/</id>
    <published>2019-01-19T06:51:29.000Z</published>
    <updated>2019-07-19T07:48:19.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Session介绍和原理"><a href="#Session介绍和原理" class="headerlink" title="Session介绍和原理"></a>Session介绍和原理</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Request对象解决了一次请求内的不同Servlet之间的数据共享问题，那么一个用户的不同请求的处理需要使用相同的数据怎么办呢？</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>Session。（HttpSession）</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>用户使用浏览器第一次向服务器发送请求，服务器在接收到请求后，调用对应的Servlet进行处理。在处理过程中会给用户创建一个Session对象，用来存储用户请求处理相关的公共数据，并将此Session对象的JSESSIONID以Cookie的形式存储在浏览器中（临时存储，浏览器关闭即时失效）。用户在发起第二次请求及后续请求时，请求信息会附带JSESSIONID，服务器进行处理时，会根据JSESSIONID返回对应的对象，这样就取到需要用的数据。每个用户的JSESSIONID是不同的，这样就可以识别发送请求的是哪一个具体的用户。</p><h2 id="Session的特点和使用"><a href="#Session的特点和使用" class="headerlink" title="Session的特点和使用"></a>Session的特点和使用</h2><h3 id="内部实现原理"><a href="#内部实现原理" class="headerlink" title="内部实现原理"></a>内部实现原理</h3><p>用户第一次访问服务器，服务器会创建一个session对象给此用户，并将给session对象的JSESSIONID使用Cookie技术存储到浏览器，保证用户的其他请求能够获取到同一个session对象，也保证了同一用户不同请求能够获取到共享的数据。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>Session技术是依赖Cookie技术的<strong>服务端的存储技术</strong>。</p><p>​    注：<br>​        Cookie：浏览器端的数据存储技术。<br>​        Session：服务器端的数据存储技术。</p><p>由服务器完成创建。</p><p>Session依赖于Cookie技术。<br>    以为Session创建好了，要一只伴随该用户的请求来使用的话，需要在每次请求都带着该用户的Session的唯一标识符（JSESSIONID）使用。</p><p>作用在一次会话中。（<strong>作用域</strong>）</p><p>每个用户独立拥有一个Session。</p><p>默认存储时间为30分钟。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>解决了一个用户的不同请求的数据共享问题。</p><blockquote><p>  每个新产品或新技术的出现都是为了解决现有的痛点。</p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>创建Session对象/获取Session对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = request.getSession();</span><br></pre></td></tr></table></figure><blockquote><p>  如果请求中拥有Session的唯一标识符（JSESSIONID），则返回对应的Session对象；</p><p>  如果请求中没有Session的唯一标识符（JSESSIONID），则创建新的Session对象并将其JSESSIONID作为Cookie数据存储到浏览器内存中（关闭浏览器JSESSIONID失效）。</p></blockquote><p>设置Session存储时间</p><ol><li><p>单个Session设置存储时间：session.setMaxInactiveInterval(int seconds);</p></li><li><p>服务器内所有项目的公共配置<br>在Tomcat的路径下找到web.xml配置文件（路径：%TOMCAT_HOME%\conf\web.xml），使用文本编辑器打开，找到如下配置并进行更改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意单位为分钟 --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>单个项目的配置<br>在项目的web.xml配置文件中添加如下配置信息即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意单位为分钟 --&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>注意：</p><p>​    在有效存储时间内如果再次发起请求则会重新计算存储时间；<br>​    而在有效存储时间内未再次发起请求则该Session对象失效。</p><p>设置Session强制失效（即使Session还未失效，也要强制删除Session对象）：<br>    使用场景举例：用户点击“登出\退出”的时候。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>只要不关闭浏览器，并且Session不失效的情况下，同一个用户的任意请求在项目的任意Servlet中获取到的都是同一个Session对象。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>一次对话。<br>    或者可以说：在JSESSIONID和Session对象不失效的情况下，它的作用域为整个项目。</p><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><p>用户什么时候能获取到Session？</p><p>什么时候会获取到新的Session？</p><p>Session什么时候失效？</p><h2 id="Session的数据流转和总结"><a href="#Session的数据流转和总结" class="headerlink" title="Session的数据流转和总结"></a>Session的数据流转和总结</h2><h3 id="存储和获取数据"><a href="#存储和获取数据" class="headerlink" title="存储和获取数据"></a>存储和获取数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 存储</span><br><span class="line">session.setAttribute(String name, Object value);</span><br><span class="line">// 获取</span><br><span class="line">session.getAttribute(String name);// 返回的数据类型为Object</span><br></pre></td></tr></table></figure><blockquote><p>  注意：存储的动作和取出的动作发生在不同请求中，但是存储要先于取出。</p></blockquote><h3 id="Session的使用时机"><a href="#Session的使用时机" class="headerlink" title="Session的使用时机"></a>Session的使用时机</h3><p>一般用户在登录web项目时会将个人信息存储到Session中，供该用户的其他请求使用。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Session解决了一个用户在不同请求的数据共享问题，只要JSESSIONID不失效和Session对象不失效的情况下，用户的任意请求在处理时都能获取到同一个Session对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Session介绍和原理&quot;&gt;&lt;a href=&quot;#Session介绍和原理&quot; class=&quot;headerlink&quot; title=&quot;Session介绍和原理&quot;&gt;&lt;/a&gt;Session介绍和原理&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;
      
    
    </summary>
    
      <category term="JavaWeb" scheme="https://imwarhorse.github.io/categories/JavaWeb/"/>
    
    
      <category term="Java" scheme="https://imwarhorse.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://imwarhorse.github.io/tags/Servlet/"/>
    
      <category term="Web" scheme="https://imwarhorse.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb05-Cookie</title>
    <link href="https://imwarhorse.github.io/2019/01/17/JavaWeb05-Cookie/"/>
    <id>https://imwarhorse.github.io/2019/01/17/JavaWeb05-Cookie/</id>
    <published>2019-01-17T03:32:50.000Z</published>
    <updated>2019-07-19T06:49:12.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cookie介绍及使用（创建和设置有效期）"><a href="#Cookie介绍及使用（创建和设置有效期）" class="headerlink" title="Cookie介绍及使用（创建和设置有效期）"></a>Cookie介绍及使用（创建和设置有效期）</h2><h3 id="Cookie的作用"><a href="#Cookie的作用" class="headerlink" title="Cookie的作用"></a>Cookie的作用</h3><p>解决了发送的不同请求之间的数据共享问题。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>Cookie不能存中文。要我Cookie封装在响应头和请求行里，HTTP响应头和请求行中不能有中文。</li><li>Cookie不安全。</li><li>一个Cookie对象存储一条数据，多条数据需要多创建几个Cookie对象进行存储。</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>Cookie的创建和存储</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Cookie对象</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(String cookieName, String value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置Cookie</span></span><br><span class="line">cookie.setMaxAge(<span class="keyword">int</span> expiry);<span class="comment">// 设置Cookie存储时间（注：expiry单位为秒）</span></span><br><span class="line">cookie.setPath(String uri);<span class="comment">// 设置Cookir的请求路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应Cookie对象给客户端</span></span><br><span class="line">response.addCookie(Cookie cookie);</span><br></pre></td></tr></table></figure><p>Cookie的获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取Cookie信息数组</span></span><br><span class="line">Cookie[] cookies = response.getCookies();</span><br><span class="line"><span class="comment">// 遍历Cookie信息数组（使用for循环遍历即可）</span></span><br><span class="line"><span class="keyword">for</span> (Cookie ck : cookies) &#123;</span><br><span class="line">    String name = ck.getName();</span><br><span class="line">    String value = ck.getValie();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>Cookie是<strong>浏览器端的数据存储技术</strong>；</li><li>存储的数据声明在服务器端；</li><li>临时存储：存储在浏览器的运行内存中，浏览器关闭即失效；</li><li>定时存储：设置了Cookie的有效期，存储在客户端的硬盘中，在有效期内，符合路径要求的都会附带该信息；</li><li>默认Cookie信息存储好之后，每次请求都会附带，除非设置请求路径。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Cookie介绍及使用（创建和设置有效期）&quot;&gt;&lt;a href=&quot;#Cookie介绍及使用（创建和设置有效期）&quot; class=&quot;headerlink&quot; title=&quot;Cookie介绍及使用（创建和设置有效期）&quot;&gt;&lt;/a&gt;Cookie介绍及使用（创建和设置有效期）&lt;/
      
    
    </summary>
    
      <category term="JavaWeb" scheme="https://imwarhorse.github.io/categories/JavaWeb/"/>
    
    
      <category term="Java" scheme="https://imwarhorse.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://imwarhorse.github.io/tags/Servlet/"/>
    
      <category term="Web" scheme="https://imwarhorse.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb04-请求转发、重定向</title>
    <link href="https://imwarhorse.github.io/2019/01/15/JavaWeb04-%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E3%80%81%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>https://imwarhorse.github.io/2019/01/15/JavaWeb04-请求转发、重定向/</id>
    <published>2019-01-15T06:03:59.000Z</published>
    <updated>2019-07-19T06:31:17.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="请求乱码问题解决"><a href="#请求乱码问题解决" class="headerlink" title="请求乱码问题解决"></a>请求乱码问题解决</h2><ol><li><p>使用String进行重新编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="keyword">new</span> String(req.getParameter(“name”).toBytes(“iso8859-<span class="number">1</span>”),”utf-<span class="number">8</span>”);</span><br></pre></td></tr></table></figure></li><li><p>使用公共配置</p></li></ol><ul><li><p>Get请求方式：<br>第一步：在service()方法中使用req.setCharacterEncoding(“utf-8”);<br>第二步：在tomcat服务器目录下的conf文件夹下找到server.xml文件，打开进行如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">”8080”</span> <span class="attr">protocol</span>=<span class="string">”HTTP/1.1”</span> <span class="attr">connectorTimeout</span>=<span class="string">”20000”</span> <span class="attr">redirectPort</span>=<span class="string">”8443”</span> <span class="attr">useBodyEncodingForURI</span>=<span class="string">”true”/</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Post请求方式：<br>在service()方法中使用request.setCharacterEncoding(“utf-8”);</p></li></ul><h2 id="Servlet流程总结"><a href="#Servlet流程总结" class="headerlink" title="Servlet流程总结"></a>Servlet流程总结</h2><p>未加粗文本为不可见的，由Servlet容器或浏览器完成。</p><p><strong>加粗文本为开发人员控制的，开发时需要关注的内容，Servlet的使用流程。</strong></p><hr><p>浏览器发起请求到服务器（请求）<br>服务器接收浏览器的请求进行解析，创建request对象存储请求数据<br>服务器调用对应的Servlet进行请求处理，并将request对象作为实参传递给Servlet的方法<br><strong>Servlet的方法执行进行请求处理</strong><br>    <strong>设置请求编码格式</strong><br>    <strong>设置响应编码格式</strong><br>    <strong>获取请求信息</strong><br>    <strong>处理请求信息</strong><br>        <strong>创建业务层对象</strong><br>        <strong>处理</strong><br>        <strong>调用业务层对象方法</strong><br>    <strong>响应处理结果</strong></p><hr><h3 id="数据流程流程"><a href="#数据流程流程" class="headerlink" title="数据流程流程"></a>数据流程流程</h3><p>浏览器—-&gt;服务器—-&gt;数据库<br>浏览器&lt;—-服务器&lt;—-数据库</p><h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>服务器在接收到浏览器的请求后，仅仅使用一个Servlet进行请求处理，会造成不同的Servlet进行请求处理，会造成不同的Servlet逻辑代码冗余，Servlet的职责不明确。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>使用请求转发。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>一次请求；</li><li>地址栏地址不改变。</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>实现多个Servlet联动操作处理请求，这样避免代码冗余，让Servlet的职责更加明确。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getRequestDispatcher(“要转发的地址”).forward(req, response);</span><br></pre></td></tr></table></figure><p>要转发的地址：相对路径。可以是Servlet的url-pattern地址，也可以是jsp文件位置。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>请求转发后直接return即可。因为请求转发之后转发到的servlet进行处理之后已经对请求做出响应，做出请求转发操作的servlet再继续进行操作也没有意义了。</p><blockquote><p>联想语句：多个Servlet联动处理同一个请求。</p></blockquote><h2 id="request对象的作用域"><a href="#request对象的作用域" class="headerlink" title="request对象的作用域"></a>request对象的作用域</h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>假如第一个Servlet需要将处理结果或者处理建议给到第二个Servlet，使用请求转发后，不同Servlet之间怎么进行数据的共享呢？或者说数据怎么从一个Servlet流转到另一个Servlet呢？</p><p>提醒：前一个Servlet将处理结果封装到request对象中，后一个Servlet将前一个Servlet封装的信息取出来并删除(看情况而定)，进行处理之后再进行同样的步骤转发给后面的Servlet（如果有）。</p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装数据</span></span><br><span class="line">req.setAttribute(String name, Object obj);</span><br><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line">req.getAttribute(String name);</span><br></pre></td></tr></table></figure><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>解决了一次请求内的不同Servlet的数据（请求数据+其他数据）共享问题。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>基于请求转发，一次请求中的所有Servlet共享。（或者说：一次请求内，请求所经历的所有servlet共享同一个request）。</p><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>使用request对象进行数据流转，数据只在一次请求内有效。</p><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li>Request由服务器创建</li><li>每次请求都会创建</li><li>生命周期：一次请求内</li></ul><hr><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><ol><li>如果当前的请求，Servlet无法进行处理怎么办？</li><li>如果使用请求转发，造成表单数据重复提交，怎么办？</li></ol><h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h3><p>使用重定向。</p><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(“路径”);</span><br><span class="line">本地路径为：uri</span><br><span class="line">网络路径为：定向资源的URL信息</span><br></pre></td></tr></table></figure><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ul><li>两次请求</li><li>浏览器地址改变</li><li>避免表单重复提交</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>如果请求中有表单数据，而数据又比较重要，不能重复提交，建议使用重定向。</li><li>如果请求被Servlet接收后，无法进行处理，建议使用重定向定位到可以处理的资源。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;请求乱码问题解决&quot;&gt;&lt;a href=&quot;#请求乱码问题解决&quot; class=&quot;headerlink&quot; title=&quot;请求乱码问题解决&quot;&gt;&lt;/a&gt;请求乱码问题解决&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用String进行重新编码&lt;/p&gt;
&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="JavaWeb" scheme="https://imwarhorse.github.io/categories/JavaWeb/"/>
    
    
      <category term="Java" scheme="https://imwarhorse.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://imwarhorse.github.io/tags/Servlet/"/>
    
      <category term="Web" scheme="https://imwarhorse.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb03-Request对象和Response对象</title>
    <link href="https://imwarhorse.github.io/2019/01/13/JavaWeb03-Request%E5%AF%B9%E8%B1%A1%E5%92%8CResponse%E5%AF%B9%E8%B1%A1/"/>
    <id>https://imwarhorse.github.io/2019/01/13/JavaWeb03-Request对象和Response对象/</id>
    <published>2019-01-13T01:29:55.000Z</published>
    <updated>2019-07-19T06:24:06.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h2><ol><li>从服务器启动后<strong>第一次调用</strong>到服务器关闭；</li><li>如果Servlet在web.xml中配置了load-on-startup，生命周期为<strong>服务器启动</strong>到服务器关闭。<blockquote><p>从第一次调用，到服务器关闭。如果在web.xml中配置了load-on-startup则是从服务器启动到服务器关闭。</p></blockquote></li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>init()方法是对Servlet进行初始化的一个方法，会在Servlet第一次加载进入内存时执行。</p><p>destroy()方法是在Servlet被销毁时执行，也就是服务器关闭时。</p><h2 id="service-方法、doGet-方法以及doPost-方法的使用和区别"><a href="#service-方法、doGet-方法以及doPost-方法的使用和区别" class="headerlink" title="service()方法、doGet()方法以及doPost()方法的使用和区别"></a>service()方法、doGet()方法以及doPost()方法的使用和区别</h2><ul><li>service()：不管是get方式还是post方式，如果Servlet类中有service()方法，则优先调用service()方法。但是，不推荐重写service()方法。</li><li>doGet()：在没有service()方法的情况下，如果请求方式是get，则调用该处理请求的方法。</li><li>doPost()：在没有service()方法的情况下，如果请求方式是post，则调用该处理请求的方法。</li></ul><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>如果在重写的service()方法中调用了父类的service()方法（super.service(arg0, arg1)），则service方法处理完后，会再次根据请求方式响应doGet()或doPost()方法执行。所以，一般情况下，我们是不在重写的service()方法中调用父类的service()方法的，避免出现405错误。</p><h3 id="扩展：常见错误状态码"><a href="#扩展：常见错误状态码" class="headerlink" title="扩展：常见错误状态码"></a>扩展：常见错误状态码</h3><p>404错误：资源未找到。</p><ul><li>原因一：在请求地址中的Servlet别名书写错误。</li><li>原因二：虚拟项目名称拼写错误。</li></ul><p>500错误：内部服务器错误</p><ul><li>错误一：找不到web.xml中配置的url-pattern所映射的servlet类(配置错误，ClassNotFound)<ul><li>解决：在web.xml中校验servlet类的全限定路径是否拼写错误。</li></ul></li><li>错误二：因为处理请求的方法(service方法\doGet方法\doPost方法)中的代码执行错误导致。<ul><li>解决：根据错误提示对处理请求的方法体中的代码进行错误排查并更改。</li></ul></li></ul><p>405错误：请求方式不支持</p><p>原因：请求方式和servlet中的方法不匹配所导致。<br>解决：</p><ol><li>使用service()方法进行请求处理(不推荐)，并不在service()方法中直接使用父类的service()方法</li><li>重写doGet()和doPost()方法，并准确根据请求方式进行所重写方法的代码编写</li></ol><h2 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>浏览器发起请求到服务器，会遵循HTTP协议将请求数据发送到服务器。那么服务器收到的请求该怎么存储呢？不但要存，而且要保证完整性。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>使用对象存储，服务器每接收一个请求，就创建一个对象专门存储此次请求数据。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>Request对象。</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>服务器在接收到浏览器的请求后，会创建一个request对象，对象中存储了此次请求相关的请求数据。服务器在调用Servlet时将创建的request对象作为实参传递给Servlet的方法，比如：service()方法。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>request对象中封存了当前请求的所有请求信息。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>获取请求头数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取请求方式</span></span><br><span class="line">request.getMethod();</span><br><span class="line"><span class="comment">// 获取请求URL</span></span><br><span class="line">request.getRequestURL();</span><br><span class="line"><span class="comment">// 获取请求URI</span></span><br><span class="line">request.getRequestURI();</span><br><span class="line"><span class="comment">// 获取请求协议</span></span><br><span class="line">request.getScheme();</span><br></pre></td></tr></table></figure><p>获取请求行数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回指定的请求头信息</span></span><br><span class="line">request.getHeader(<span class="string">"键名"</span>);</span><br><span class="line"><span class="comment">// 返回请求头的枚举集合</span></span><br><span class="line">request.getHeaderNames();</span><br></pre></td></tr></table></figure><p>获取用户数据（核心）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取指定的用户数据</span></span><br><span class="line">request.getParameter(<span class="string">"键名"</span>);</span><br><span class="line"><span class="comment">// 返回同键不同值的请求数据(多用于多选按钮)，返回的数组</span></span><br><span class="line">request.getParameterValues(<span class="string">"键名"</span>);</span><br><span class="line"><span class="comment">// 返回所有用户请求数据的枚举集合</span></span><br><span class="line">request.getParameterNames();</span><br></pre></td></tr></table></figure><h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><ol><li>如果要获取的请求数据不存在，不会报错，会返回null。</li><li>request对象由tomcat服务器创建，并作为实际参数传递给处理请求的servlet的处理请求的方法。</li></ol><h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>一个用来将数据响应到浏览器的对象。</p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置响应头</span></span><br><span class="line">response.setHeader(String name,String value);<span class="comment">// 在响应头中添加信息，但是同键会覆盖。</span></span><br><span class="line">response.addHeader(String name,String value);<span class="comment">// 在响应头中添加响应信息，但是不会覆盖。</span></span><br><span class="line"><span class="comment">// 设置响应状态</span></span><br><span class="line">response.sendError(<span class="keyword">int</span> num, String msg);<span class="comment">// 自定义响应状态码</span></span><br><span class="line"><span class="comment">// 设置响应实体(核心)</span></span><br><span class="line">response.getWriter().write(String str);<span class="comment">// 响应具体的数据给浏览器</span></span><br></pre></td></tr></table></figure><h3 id="设置响应编码格式"><a href="#设置响应编码格式" class="headerlink" title="设置响应编码格式"></a>设置响应编码格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(“text/html;charset=utf-<span class="number">8</span>”);</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>service()方法请求处理代码流程：</p><ul><li>设置响应编码格式</li><li>获取请求数据</li><li>处理请求数据<ul><li>数据库操作（MVC思想）</li></ul></li><li>响应处理结果</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Servlet的生命周期&quot;&gt;&lt;a href=&quot;#Servlet的生命周期&quot; class=&quot;headerlink&quot; title=&quot;Servlet的生命周期&quot;&gt;&lt;/a&gt;Servlet的生命周期&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;从服务器启动后&lt;strong&gt;第一次调用&lt;/st
      
    
    </summary>
    
      <category term="JavaWeb" scheme="https://imwarhorse.github.io/categories/JavaWeb/"/>
    
    
      <category term="Java" scheme="https://imwarhorse.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://imwarhorse.github.io/tags/Servlet/"/>
    
      <category term="Web" scheme="https://imwarhorse.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>[经验分享]保证Cookie自动登录信息安全的方法</title>
    <link href="https://imwarhorse.github.io/2019/01/12/%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB-%E4%BF%9D%E8%AF%81Cookie%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://imwarhorse.github.io/2019/01/12/经验分享-保证Cookie自动登录信息安全的方法/</id>
    <published>2019-01-12T04:44:18.000Z</published>
    <updated>2019-07-17T13:28:52.542Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><blockquote><p>将用户的认证信息保存在一个Cookie中。</p></blockquote><ul><li>cookie名：uid。推荐进行加密，比如MD5(‘站点名称’)等。</li><li>cookie值：登录名|有效时间|Expires|hash值。hash值可以由“登录名+有效时间Expires+用户密码(进行加密处理后的)的前几位+salt”，salt是保证在服务器端站点配置文件中的随机数。</li></ul><h3 id="该设计的缺点"><a href="#该设计的缺点" class="headerlink" title="该设计的缺点"></a>该设计的缺点</h3><ol><li>即使数据库被盗了，盗用者还是无法登录到系统，因为组成cookie值的salt是保证在服务器站点配置文件中而非数据库中。</li><li>如果账号被盗了，用户修改密码，可以使盗用者的cookie值无效。</li><li>如果服务器端的数据库被盗了，通过修改salt值可以使所有用户的cookie值无效，迫使用户重新登录系统。</li><li>有效时间Expires可以设置为当前时间+过去时间（比如两天），这样可以保证每次登录的cookie值都不一样，防止盗用者窥探到自己的cookie值后作为后门，长期登录。</li></ol><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>每个用户登录之后生成一个随机的GUID，然后把GUID存在数据库里面（也可以考虑使用Redis，把用户信息和随机GUID以KEY-VALUE方式存储GUID-用户信息，存储时设置超时时间，比如20分钟，每次验证用户信息都自动延长20分钟。如果用户选择记住登录，则设置时间为30天）。安全要求高的话，每次重新登录（包括用户名密码和使用GUID）都重新生成GUID，旧的作废，这样在新的地方登录之后旧的记住登录就自动失效。安全要求低的话可以每次都返回相同的，直到用户修改密码之后让旧的GUID作废。用户Cookies里面没有直接和用户名、密码有关的内容，即使Cookies被盗了也无法修改密码，原用户发现账号异常之后只要修改密码就可以防止盗号了。</p><p>另：防止XSS攻击，可以将Http-Only设置为True。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;将用户的认证信息保存在一个Cookie中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;cook
      
    
    </summary>
    
      <category term="实战经验" scheme="https://imwarhorse.github.io/categories/%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Web" scheme="https://imwarhorse.github.io/tags/Web/"/>
    
      <category term="经验" scheme="https://imwarhorse.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb02-Servlet的url-pattern匹配规则</title>
    <link href="https://imwarhorse.github.io/2019/01/11/JavaWeb02-Servlet%E7%9A%84url-pattern%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99/"/>
    <id>https://imwarhorse.github.io/2019/01/11/JavaWeb02-Servlet的url-pattern匹配规则/</id>
    <published>2019-01-11T12:57:44.000Z</published>
    <updated>2019-07-19T07:02:00.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="几种容易混淆的规则"><a href="#几种容易混淆的规则" class="headerlink" title="几种容易混淆的规则"></a>几种容易混淆的规则</h2><ol><li>servlet容器中的匹配规则既不是简单的通配，也不是正则表达式，而是特定的规则。所以不要用通配符或者正则表达式的匹配规则来看到servlet的url-pattern；</li><li>Servlet 2.5开始，一个servlet可以使用多个url-pattern规则，&lt;servlet-mapping&gt;标签表明了与该servlet响应的匹配规则，每个&lt;url-pattern&amp;gt代表一个匹配规则；</li><li>当servlet容器接收到浏览器发起的一个url请求后，容器会用url减去当前应用的上下文路径，以剩下的字符串作为servlet映射，假如url是<code>http://localhost:8080/demo/index.html</code>，其应用上下文是demo，容器<code>http://localhost:8080/demo</code>去掉，用剩下的/index部分拿来做servlet映射匹配；</li><li>url-pattern映射匹配过程是有优先顺序的，而且，当有一个servlet匹配成功以后，就不会继续往后去匹配后面的servlet了。</li></ol><h2 id="一、四种匹配规则"><a href="#一、四种匹配规则" class="headerlink" title="一、四种匹配规则"></a>一、四种匹配规则</h2><h3 id="精准匹配"><a href="#精准匹配" class="headerlink" title="精准匹配"></a>精准匹配</h3><p>&lt;url-pattern&gt;中配置的项必须与url完全精准匹配。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user/users.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/index.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user/addUser.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当在浏览器中输入如下几种url时，都会被匹配到该servlet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/demo/user/user.html</span><br><span class="line">http://localhost:8080/demo/index.html</span><br><span class="line">http://localhost:8080/demo/user/addUser.action</span><br></pre></td></tr></table></figure><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p><code>http://localhost:8080/demo/user/addUser/</code>是非法url，不会被当作<code>http://localhost:8080/demo/user/addUser</code>识别</p><p>另外，上述url后面可以跟任意的查询条件，都会被匹配，如<code>http://localhost:8080/demo/user/addUser?username=jerry&amp;age=18</code>会被匹配到MyServlet。</p><h3 id="路径匹配"><a href="#路径匹配" class="headerlink" title="路径匹配"></a>路径匹配</h3><h4 id="以”-”字符开头，并以”-”结尾的字符串用于路径匹配"><a href="#以”-”字符开头，并以”-”结尾的字符串用于路径匹配" class="headerlink" title="以”/”字符开头，并以”/*”结尾的字符串用于路径匹配"></a>以”/”字符开头，并以”/*”结尾的字符串用于路径匹配</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>路径以/user/开始，后面的路径可以任意。比如下面的url都会被匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/demo/user/user.html</span><br><span class="line">http://localhost:8080/demo/user/addUser.action</span><br><span class="line">http://localhost:8080/demo/user/updateUser.action</span><br></pre></td></tr></table></figure><h3 id="扩展名匹配"><a href="#扩展名匹配" class="headerlink" title="扩展名匹配"></a>扩展名匹配</h3><p>以”*.”开头的字符串被用于扩展名匹配</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上，则任何扩展名为jsp或action的url请求都会匹配，比如下面的url都会被匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/demo/user/users.jsp</span><br><span class="line">http://localhost:8080/demo/toHome.action</span><br></pre></td></tr></table></figure><h3 id="缺省匹配"><a href="#缺省匹配" class="headerlink" title="缺省匹配"></a>缺省匹配</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、匹配顺序"><a href="#二、匹配顺序" class="headerlink" title="二、匹配顺序"></a>二、匹配顺序</h2><h3 id="精准匹配-1"><a href="#精准匹配-1" class="headerlink" title="精准匹配"></a>精准匹配</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">servlet-mapping1：</span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user/users.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">servlet-mapping2：</span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当一个请求<code>http://localhost:8080/demo/user/users.hml</code>来的时候，servlet-mapping1匹配到之后不再用servlet-mapping2匹配。</p><h3 id="路径匹配-1"><a href="#路径匹配-1" class="headerlink" title="路径匹配"></a>路径匹配</h3><p>先最长路径匹配，再最短路径匹配</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">servlet-mapping1：</span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">servlet-mapping2：</span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当一个请求<code>http://localhost:8080</code>来的时候，servlet-mapping1匹配到之后，不在用servlet-mapping2匹配。</p><h3 id="扩展匹配"><a href="#扩展匹配" class="headerlink" title="扩展匹配"></a>扩展匹配</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">servlet-mapping1：</span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">servlet-mapping2：</span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当一个请求<code>http://localhost:8080/demo/user/addUser.action</code>来的时候，servlet-mapping1匹配到，不再用servlet-mapping2匹配。</p><h3 id="缺省匹配-1"><a href="#缺省匹配-1" class="headerlink" title="缺省匹配"></a>缺省匹配</h3><p>以上都找不到servlet，就用默认的servlet，配置为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、需要注意的问题"><a href="#三、需要注意的问题" class="headerlink" title="三、需要注意的问题"></a>三、需要注意的问题</h2><h3 id="路径匹配和扩展名匹配无法同时设置"><a href="#路径匹配和扩展名匹配无法同时设置" class="headerlink" title="路径匹配和扩展名匹配无法同时设置"></a>路径匹配和扩展名匹配无法同时设置</h3><p>匹配方法只有三种，要么是路径匹配(以”/”字符开头，并以”*”结尾)，要么是扩展名匹配(以”*.”开头)，要么是精确匹配，三种匹配方法不能进行组合，不要想当然使用通配符或正则表达式规则。</p><p>如&lt;url-pattern&gt;/user/*.action&lt;/url-pattern&gt;是非法的</p><p>另外注意：&lt;url-pattern&gt;/aa/*/bb&lt;/url-pattern&gt;是精准匹配，合法，这里的*不是通配的含义</p><h3 id="“-”和”-”含义不相同"><a href="#“-”和”-”含义不相同" class="headerlink" title="“/”和”/*”含义不相同"></a>“/”和”/*”含义不相同</h3><ul><li>“/*”属于路径匹配，并且可以匹配所有request，由于路径匹配的优先级仅次于精准匹配，所以”/*”会覆盖所有的扩展名匹配，很多404错误均由此引起，所以这是一个特别恶劣的匹配模式，一般只用于filter的url-pattern</li><li>“/”是servlet中特殊的匹配模式，且该模式有且仅有一个实例，优先级最低，不会覆盖其他任何url-pattern，只是会替换servlet容器的内建default servlet，该模式同样会匹配所有request。</li><li>配置”/”后，一种可能的现象是MyServlet会拦截诸如<code>http://localhost:8080/demo/user/addUser.action</code>、<code>http://localhost:8080/demo/user/updateUser</code>的格式的请求，但是并不会拦截<code>http://localhost:8080/demo/user/users.jsp</code>、<code>http://localhost:8080/demo/index.jsp</code>，这是因为servlet容器有内置的”*.jsp”匹配器，而扩展名匹配的优先级高于缺省匹配，所以才会有上述现象。</li></ul><p>Tomcat在%CATALINA_HOME%\conf\web.xml文件中配置了默认的servlet，配置代码如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.jasper.servlet.JspServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>fork<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>xpoweredBy<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- The mappings for the JSP servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>jsp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jspx<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>参考文献：<a href="http://stackoverflow.com/questions/4140448/difference-between-and-in-servlet-mapping-url-pattern" target="_blank" rel="noopener">http://stackoverflow.com/questions/4140448/difference-between-and-in-servlet-mapping-url-pattern</a></li><li>“/”和”/*”均会拦截静态资源的加载，需要特别注意</li></ul><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p><img src="https://i.loli.net/2019/07/17/5d2f20d9a2bb640579.png" alt="001.png"><br><img src="https://i.loli.net/2019/07/17/5d2f20d9c055f84935.png" alt="002.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;几种容易混淆的规则&quot;&gt;&lt;a href=&quot;#几种容易混淆的规则&quot; class=&quot;headerlink&quot; title=&quot;几种容易混淆的规则&quot;&gt;&lt;/a&gt;几种容易混淆的规则&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;servlet容器中的匹配规则既不是简单的通配，也不是正则表达式，而是特
      
    
    </summary>
    
      <category term="JavaWeb" scheme="https://imwarhorse.github.io/categories/JavaWeb/"/>
    
    
      <category term="Java" scheme="https://imwarhorse.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://imwarhorse.github.io/tags/Servlet/"/>
    
      <category term="Web" scheme="https://imwarhorse.github.io/tags/Web/"/>
    
      <category term="技巧" scheme="https://imwarhorse.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb01-Servlet入门</title>
    <link href="https://imwarhorse.github.io/2019/01/11/JavaWeb01-Servlet%E5%85%A5%E9%97%A8/"/>
    <id>https://imwarhorse.github.io/2019/01/11/JavaWeb01-Servlet入门/</id>
    <published>2019-01-11T10:26:20.000Z</published>
    <updated>2019-07-17T12:56:58.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Servlet概述和介绍"><a href="#Servlet概述和介绍" class="headerlink" title="Servlet概述和介绍"></a>Servlet概述和介绍</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>狭义的Servlet是指Java语言实现的一个接口。广义的Servlet是指任何实现了Servlet接口的类，一般情况下，人们将Servlet理解为后者。Servlet运行于支持Java的应用服务器中。从原理上讲，Servlet可以响应任何类似的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。</p><blockquote><ol><li>只要是实现了Servlet接口的类都可以称之为Servlet。</li><li>Servlet类需要继承HttpServlet，HttpServlet类又继承了GenericServlet类，而GenericServlet类实现了Servlet接口。</li></ol></blockquote><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li>运行在支持Java的应用服务器上；</li><li>Servlet的实现遵循了服务器能识别的规则，也就是服务器会自动根据请求调用对应的Servlet；</li><li>进行请求处理；</li><li>简单方便，可移植性强。</li></ul><h2 id="Servlet的访问流程"><a href="#Servlet的访问流程" class="headerlink" title="Servlet的访问流程"></a>Servlet的访问流程</h2><h3 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">URL：http://localhost:8080/myservlet/my</span><br><span class="line">组成：服务器地址:端口号/虚拟项目名/servlet的别名</span><br><span class="line">注：</span><br><span class="line">    虚拟项目：webapps下的文件夹的名称</span><br><span class="line">    servlet的别名：在web.xml设置的servlet-name对应的servlet-mapping下的url-pattern</span><br></pre></td></tr></table></figure><p>浏览器发送请求到服务器，服务器根据请求URL地址中的URI信息，在Tomcat的webapps目录下找到对应的项目文件夹，然后在web.xml 中检索对应的servlet，找到后调用并执行Servlet。</p><blockquote><p>URI：虚拟项目名/servlet的别名。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Servlet概述和介绍&quot;&gt;&lt;a href=&quot;#Servlet概述和介绍&quot; class=&quot;headerlink&quot; title=&quot;Servlet概述和介绍&quot;&gt;&lt;/a&gt;Servlet概述和介绍&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;
      
    
    </summary>
    
      <category term="JavaWeb" scheme="https://imwarhorse.github.io/categories/JavaWeb/"/>
    
    
      <category term="Java" scheme="https://imwarhorse.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://imwarhorse.github.io/tags/Servlet/"/>
    
      <category term="Web" scheme="https://imwarhorse.github.io/tags/Web/"/>
    
  </entry>
  
</feed>
